# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ pkgs, config, ... }:

{
  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
  boot.consoleLogLevel = 0;

  networking.hostName = "${HOSTNAME}"; # Define your hostname.

  # Enable networking
  networking.networkmanager.enable = true;

  programs.virt-manager.enable = true;
  virtualisation.docker = {
    enable = true;
    rootless = {
      enable = true;
      setSocketVariable = true;
    };
    daemon.settings = {
      userland-proxy = false;
    };
  };
  virtualisation.libvirtd = {
    enable = true;
    qemu = {
      package = pkgs.stable.qemu_kvm;
      runAsRoot = true;
      swtpm.enable = true;
      ovmf = {
        enable = true;
      };
    };
  };


  # Set your time zone.
  time.timeZone = "America/Denver";
  ${LOCALE}


  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.${NIXUSER} = {
    isNormalUser = true;
    description = "${NIXUSER}";
    extraGroups = [ "networkmanager" "wheel" "video" "libvirtd" ];
    packages = with pkgs; [];
    shell = pkgs.unstable.nushell;
  };
  users.users.greeter = {
    isSystemUser = true;
    description = "For running the login programs and so on";
    extraGroups = [ "tty" "video" "input" "seat" "systemd-journal" ];
    shell = pkgs.stable.bash;
  };

  nix.settings.allowed-users = [ "${NIXUSER}" ];
  nix.settings.experimental-features = [ "nix-command" "flakes" ];

  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    stable.gdb
    stable.killall
    stable.python312
    stable.nodejs
    stable.git
    stable.git-lfs
    stable.kdiff3
    stable.dig
    stable.tmux
    stable.fzf
    stable.grc
    stable.packagekit
    stable.cifs-utils
    stable.mediainfo
    stable.sqlite
    stable.bluez
    stable.blueberry
    stable.udiskie
    stable.polkit
    stable.polkit_gnome
    stable.networkmanagerapplet
    stable.pavucontrol
    stable.pipewire
    stable.chezmoi
    stable.age
    stable.gh
    stable.dconf
    stable.lshw
    stable.pciutils
    stable.vim
    stable.wofi
    stable.nushell
    stable.broot

    # Unstable packages
    unstable.neovim
    unstable.ghostty

    ${EXTRA_SYSTEM_PACKAGES}
  ];

  fonts.packages = with pkgs.unstable; [
    nerd-fonts.shure-tech-mono
  ];

  environment.sessionVariables = {
    LIBVA_DRIVER_NAME = "nvidia";
    NVD_BACKEND = "direct";
    __GLX_VENDOR_LIBRARY_NAME = "nvidia";
    GBM_BACKEND = "nvidia-drm";
    XDG_SESSION_TYPE = "wayland";
    XDG_CURRENT_DESKTOP = "Hyprland";
    XDG_SESSION_DESKTOP = "Hyprland";
    NIXOS_OZONE_WL = "1";
    ELECTRON_OZONE_PLATFORM_HINT = "wayland";
    
    # Optional, may help with some apps
    __GL_GSYNC_ALLOWED = "0";
    __GL_VRR_ALLOWED = "0";
    WLR_DRM_NO_ATOMIC = "1";
  };
  xdg.portal = {
    enable = true;
    config.common.default = [ "hyprland" ];
  };


  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  programs.light.enable = true;
  programs.gnupg.agent = {
    enable = true;
    enableSSHSupport = true;
  };
  programs.git = {
    enable = true;
    lfs.enable = true;
  };
  programs.hyprland = {
    enable = true;
    xwayland.enable = true;
    package = pkgs.stable.hyprland;
  };

  # List services that you want to enable:
  hardware = {
    enableRedistributableFirmware = true;
    bluetooth = {
      enable = true;
      powerOnBoot = true;
    };
    pulseaudio.enable = false;
  };

  # Enable the OpenSSH daemon.
  services.openssh = {
    enable = true;
    ports = [ 40422 ];
    openFirewall = true;
    settings = {
        UseDns = true;
        StrictModes = false;
        X11Forwarding = false;
        AllowUsers = [ "${NIXUSER}" ];
        PasswordAuthentication = false;
        KbdInteractiveAuthentication = false;
        PermitRootLogin = "no";
    };
  };
  services.fail2ban.enable = true;
  services.logind.lidSwitch = "ignore";
  services.logind.lidSwitchDocked = "ignore";
  services.udisks2 = {
    enable = true;
  };
  services.tailscale = {
    enable = true;
    useRoutingFeatures = "both";
  };
  services.cockpit = {
    enable = true;
    port = 9090;
    openFirewall = false;
  };

  services.avahi = {
    enable = true;
    nssmdns4 = true;
    openFirewall = true;
  };
  services.dnsmasq = {
    enable = true;
  };

  services.gnome.gnome-keyring.enable = true;
  services.packagekit.enable = true;
  services.xrdp = {
    enable = true;
    openFirewall = true; 
    defaultWindowManager = "${pkgs.stable.gnome-session}/bin/gnome-session";
  };

  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
  };
  services.udev = {
    packages = with pkgs.stable; [
      yubikey-personalization
      ledger-udev-rules
    ];
    extraRules = ''
      KERNEL=="tty[0-9]*", GROUP="tty", MODE="0620", TAG+="systemd"
      KERNEL=="vcs[0-9]*", GROUP="tty", MODE="0640", TAG+="systemd"
      KERNEL=="vcsa[0-9]*", GROUP="tty", MODE="0640", TAG+="systemd"
      SUBSYSTEM=="drm", TAG+="systemd", TAG+="seat"
      SUBSYSTEM=="input", TAG+="systemd", TAG+="seat"
    '';
  };
  services.pcscd.enable = true;
  services.kmscon = {
    enable = true;
    hwRender = true;
    fonts = [
      {
        name = "ShureTechMono Nerd Font";
        package = pkgs.unstable.nerd-fonts.shure-tech-mono;
      }
    ];
    extraConfig= ''
      font-size=16
    '';
    extraOptions = "";
  };
  environment.etc."greetd/greet.sh" = {
    text = ''
      #!/usr/bin/env bash
      LC_ADDRESS="en_US.UTF-8" \
      LC_IDENTIFICATION="en_US.UTF-8" \
      LC_MEASUREMENT="en_US.UTF-8" \
      LC_MONETARY="en_US.UTF-8" \
      LC_NAME="en_US.UTF-8" \
      LC_NUMERIC="en_US.UTF-8" \
      LC_PAPER="en_US.UTF-8" \
      LC_TELEPHONE="en_US.UTF-8" \
      LC_TIME="en_US.UTF-8" \
      LANGUAGE="en_US.UTF-8" \
      LC_ALL="en_US.UTF-8" \
      LC_CTYPE="en_US.UTF-8" \
      LC_COLLATE="en_US.UTF-8" \
      LC_MESSAGES="en_US.UTF-8" \
      ${pkgs.stable.greetd.tuigreet}/bin/tuigreet --time --cmd Hyprland
    '';
    mode = "0755";
  };
  services.greetd = {                                                      
    enable = true;                                                         
    vt = 7;
    settings = {                                                           
      default_session = {
        command = "/etc/greetd/greet.sh";
        user = "greeter";
      };                                                                   
    };                                                                     
  };

  security.rtkit.enable = true;
  security.pam.loginLimits = [
    { domain = "@users"; item = "rtprio"; type = "-"; value = 1; }
  ];

  networking.firewall = {
    enable = true;
  };

  ${CUSTOM_SYSTEM_CONFIG}

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "24.11"; # Did you read the comment?

}
