# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running 'nixos-help').

{ pkgs, config, ... }:

{
  nix = {
    settings.allowed-users = [ "${NIXUSER}" ];
    settings.experimental-features = [ "nix-command" "flakes" ];
  };

  # Bootloader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
  boot.consoleLogLevel = 0;

  networking.hostName = "${HOSTNAME}"; # Define your hostname.

  # Enable networking
  networking.networkmanager.enable = true;

  programs.virt-manager.enable = true;
  virtualisation.docker = {
    enable = true;
    rootless = {
      enable = true;
      setSocketVariable = true;
    };
    daemon.settings = {
      userland-proxy = false;
    };
  };
  virtualisation.libvirtd = {
    enable = true;
    qemu = {
      package = pkgs.qemu_kvm;
      runAsRoot = true;
      swtpm.enable = true;
      ovmf = {
        enable = true;
      };
    };
  };


  # Set your time zone.
  time.timeZone = "America/Denver";
  ${LOCALE}


  # Define a user account. Don't forget to set a password with 'passwd'.
  users.users.${NIXUSER} = {
    isNormalUser = true;
    description = "${NIXUSER}";
    extraGroups = [ "networkmanager" "wheel" "video" "libvirtd" ];
    packages = with pkgs; [];
    shell = pkgs.nushell;
  };


  # Allow unfree packages
  nixpkgs.config.allowUnfree = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = with pkgs; [
    gdb
    killall
    python312
    nodejs
    git
    git-lfs
    dig
    tmux
    fzf
    ripgrep
    grc
    packagekit
    cifs-utils
    mediainfo
    sqlite
    udiskie
    polkit
    pipewire
    chezmoi
    age
    gh
    dconf
    lshw
    pciutils
    vim
    broot
    networkmanagerapplet
    nmap
    pinentry-curses
    rsync

    ghostty
    neovim
  ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  programs.light.enable = true;
  programs.gnupg.agent = {
    enable = true;
    enableSSHSupport = true;
  };
  programs.git = {
    enable = true;
    lfs.enable = true;
  };

  # List services that you want to enable:
  hardware = {
    enableRedistributableFirmware = true;
    bluetooth = {
      enable = true;
      powerOnBoot = true;
    };
  };

  # Enable the OpenSSH daemon.
  services.openssh = {
    enable = true;
    ports = [ 40422 ];
    openFirewall = true;
    settings = {
        UseDns = true;
        StrictModes = false;
        X11Forwarding = false;
        AllowUsers = [ "${NIXUSER}" ];
        PasswordAuthentication = false;
        KbdInteractiveAuthentication = false;
        PermitRootLogin = "no";
    };
  };
  services.pulseaudio.enable = false;
  services.fail2ban.enable = true;
  services.logind.lidSwitch = "ignore";
  services.logind.lidSwitchDocked = "ignore";
  services.udisks2 = {
    enable = true;
  };
  services.tailscale = {
    enable = true;
    useRoutingFeatures = "both";
  };
  services.cockpit = {
    enable = true;
    port = 9090;
    openFirewall = false;
  };

  services.avahi = {
    enable = true;
    nssmdns4 = true;
    openFirewall = true;
  };
  services.dnsmasq = {
    enable = false;
  };

  services.packagekit.enable = true;
  services.xrdp = {
    enable = true;
    openFirewall = true; 
    defaultWindowManager = "${pkgs.gnome-session}/bin/gnome-session";
  };

  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
  };
  services.udev = {
    packages = with pkgs; [
      yubikey-personalization
      ledger-udev-rules
    ];
    extraRules = ''
      KERNEL=="tty[0-9]*", GROUP="tty", MODE="0620", TAG+="systemd"
      KERNEL=="vcs[0-9]*", GROUP="tty", MODE="0640", TAG+="systemd"
      KERNEL=="vcsa[0-9]*", GROUP="tty", MODE="0640", TAG+="systemd"
      SUBSYSTEM=="drm", TAG+="systemd", TAG+="seat"
      SUBSYSTEM=="input", TAG+="systemd", TAG+="seat"
    '';
  };
  services.pcscd.enable = true;
  services.kmscon = {
    enable = true;
    hwRender = true;
    fonts = [
      {
        name = "ShureTechMono Nerd Font";
        package = pkgs.nerd-fonts.shure-tech-mono;
      }
    ];
    extraConfig= ''
      font-size=16
    '';
    extraOptions = "";
  };

  security.rtkit.enable = true;
  security.pam.loginLimits = [
    { domain = "@users"; item = "rtprio"; type = "-"; value = 1; }
  ];

  networking.firewall = {
    enable = true;
  };

  environment.etc."pinentry-curses".source = "${pkgs.pinentry-curses}/bin/pinentry-curses";
  system.activationScripts.pinentry-curses = ''
    mkdir -p /usr/bin
    ln -sf ${pkgs.pinentry-curses}/bin/pinentry-curses /usr/bin/pinentry-curses
  '';

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. Itâ€˜s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "25.05"; # Did you read the comment?

}
