{
  description = "NixOS configuration";

  inputs = {
    nixpkgs = {
      url = "nixpkgs/nixos-unstable";
    };
    home-manager = {
      url = "github:nix-community/home-manager/master";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    customPkgs = {
      url = "github:matt-fff/my-nixpkgs/main";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    ${ADDITIONAL_INPUTS}
  };

  outputs = inputs@{ nixpkgs, home-manager, customPkgs, ${ADDITIONAL_OUTPUTS} ... }: 
  let
      system = "x86_64-linux";
      overlay = final: prev: {
        custom = import customPkgs {
          pkgs = import nixpkgs { 
            inherit system;
            config = {
              allowUnfree = true;
              packageOverrides = pkgs: {
                espanso = pkgs.espanso.override {
                  x11Support = false;
                  waylandSupport = true;
                };
              };
            };
          };
        };
      };
  in {
    nixosConfigurations = {
      ${HOSTNAME} = nixpkgs.lib.nixosSystem {
        inherit system;

        modules = [
          ({ ... }: { nixpkgs.overlays = [ overlay ]; })
          ./configuration.nix 
          ${ADDITIONAL_MODULES}

          # make home-manager as a module of nixos
          # so that home-manager configuration will be deployed automatically when executing `nixos-rebuild switch`
          home-manager.nixosModules.home-manager
          {
            home-manager.useGlobalPkgs = true;
            home-manager.useUserPackages = true;
            home-manager.backupFileExtension = ".hmgr.bak";

            home-manager.users.${NIXUSER} = (import ./home-manager/home.nix);
          }
        ];
      };
    };
  };
}
