{
  description = "NixOS configuration";

  inputs = {
    nixpkgs = {
      url = "nixpkgs/nixos-21.11";
    };
    # home-manager, used for managing user configuration
    home-manager = {
      url = "github:nix-community/home-manager/release-24.11";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    unstablePkgs.url = "nixpkgs/nixos-unstable";
    customPkgs = {
      url = "github:matt-fff/my-nixpkgs";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    nixos-hardware.url = "github:NixOS/nixos-hardware/master";
  };

  outputs = inputs@{ nixpkgs, home-manager, unstablePkgs, customPkgs, nixos-hardware, ... }: 
  let
      system = "x86_64-linux";
      overlay = final: prev: {
        unstable = import unstablePkgs { 
          inherit system;
          config.allowUnfree = true;
        };
        stable = import nixpkgs { 
          inherit system;
          config.allowUnfree = true;
        };
        custom = import customPkgs {
          pkgs = import nixpkgs { 
            inherit system;
            config.allowUnfree = true;
          };
          unstable = import unstablePkgs {
            inherit system;
            config.allowUnfree = true;
          };
        };
      };
  in {
    nixosConfigurations = {
      ${HOSTNAME} = nixpkgs.lib.nixosSystem {
        inherit system;

        modules = [
          ({ config, pkgs, ... }: { nixpkgs.overlays = [ overlay ]; })
          ./configuration.nix 
          ./hardware-configuration.nix
          ./luks-configuration.nix
          ${ADDITIONAL_MODULES}

          # make home-manager as a module of nixos
          # so that home-manager configuration will be deployed automatically when executing `nixos-rebuild switch`
          home-manager.nixosModules.home-manager
          {
            home-manager.useGlobalPkgs = true;
            home-manager.useUserPackages = true;
            home-manager.backupFileExtension = ".bak";

            home-manager.users.${NIXUSER} = (import ./home-manager/home.nix);
          }
        ];
      };
    };
  };
}
