{
  description = "NixOS configuration";

  inputs = {
    nixpkgs = {
      url = "github:nixos/nixpkgs/nixos-24.11";
    };
    # home-manager, used for managing user configuration
    home-manager = {
      url = "github:nix-community/home-manager/release-24.11";
      # The `follows` keyword in inputs is used for inheritance.
      # Here, `inputs.nixpkgs` of home-manager is kept consistent with
      # the `inputs.nixpkgs` of the current flake,
      # to avoid problems caused by different versions of nixpkgs.
      inputs.nixpkgs.follows = "nixpkgs";
    };
    unstablePkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    customPkgs = {
      # TODO try to use the local copy to debug things.
      url = "github:matt-fff/my-nixpkgs";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = inputs@{ nixpkgs, home-manager, unstablePkgs, customPkgs, ... }: 
  let
      system = "x86_64-linux";
      unstable = import unstablePkgs { 
        inherit system;
        config.allowUnfree = true;
      };
      pkgs = import nixpkgs { 
        inherit system;
        config.allowUnfree = true;
      };
      custom = import customPkgs {
        inherit pkgs;
        inherit unstable;
      };
  in {
    nixosConfigurations = {
      ${HOSTNAME} = nixpkgs.lib.nixosSystem {

        modules = [
          ./configuration.nix 
          ./hardware-configuration.nix
          ./luks-configuration.nix

          # make home-manager as a module of nixos
          # so that home-manager configuration will be deployed automatically when executing `nixos-rebuild switch`
          home-manager.nixosModules.home-manager
          {
            home-manager.useGlobalPkgs = true;
            home-manager.useUserPackages = true;

            home-manager.users.${NIXUSER} = (import ./home-manager/home.nix {
              inherit pkgs;
              inherit unstable;
              inherit custom;
            });
          }
        ];
      };
    };
  };
}
